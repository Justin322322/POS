using System;
using System.Data;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using Grocery_POS.Models;
using Grocery_POS.Services;
using Grocery_POS.UI;
using System.Drawing;
using System.Globalization;

namespace Grocery_POS.Forms
{
    public partial class ProductManagementForm : Form
    {
        private readonly ProductService productService;
        private readonly CategoryService categoryService;
        private readonly DatabaseConnection _db;
        private Product currentProduct;
        private bool isNewProduct = false;

        public ProductManagementForm()
        {
            InitializeComponent();
            productService = new ProductService();
            categoryService = new CategoryService();
            _db = DatabaseConnection.Instance;
            currentProduct = new Product();
            
            // Set up the DataGridView styling
            SetupDataGridView();
            
            // Load data
            LoadCategories();
            LoadProducts();
        }

        private void SetupDataGridView()
        {
            // Configure DataGridView appearance
            dgvProducts.AutoGenerateColumns = false;
            dgvProducts.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(255, 204, 0);
            dgvProducts.ColumnHeadersDefaultCellStyle.ForeColor = Color.Black;
            dgvProducts.ColumnHeadersDefaultCellStyle.Font = new Font("Segoe UI", 10F, FontStyle.Bold);
            dgvProducts.DefaultCellStyle.Font = new Font("Segoe UI", 9F);
            dgvProducts.DefaultCellStyle.SelectionBackColor = Color.FromArgb(255, 204, 0);
            dgvProducts.DefaultCellStyle.SelectionForeColor = Color.Black;
            dgvProducts.RowTemplate.Height = 30;
            dgvProducts.RowHeadersVisible = false;
            dgvProducts.BorderStyle = BorderStyle.None;
            dgvProducts.CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal;
            dgvProducts.BackgroundColor = Color.White;
            dgvProducts.EnableHeadersVisualStyles = false;
            dgvProducts.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
            
            // Create columns
            if (dgvProducts.Columns.Count == 0)
            {
                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "Id",
                    HeaderText = "Id",
                    DataPropertyName = "Id",
                    Width = 50
                });

                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "Name",
                    HeaderText = "Name",
                    DataPropertyName = "Name",
                    Width = 150
                });

                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "CategoryId",
                    HeaderText = "CategoryId",
                    DataPropertyName = "CategoryId",
                    Width = 80
                });

                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "Price",
                    HeaderText = "Price",
                    DataPropertyName = "Price",
                    Width = 80,
                    DefaultCellStyle = new DataGridViewCellStyle
                    {
                        Format = "â‚±0.00",
                        Alignment = DataGridViewContentAlignment.MiddleRight
                    }
                });

                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "Stock",
                    HeaderText = "Stock",
                    DataPropertyName = "Stock",
                    Width = 80
                });

                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "Barcode",
                    HeaderText = "Barcode",
                    DataPropertyName = "Barcode",
                    Width = 100
                });

                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "CreatedAt",
                    HeaderText = "CreatedAt",
                    DataPropertyName = "CreatedAt",
                    Width = 120,
                    DefaultCellStyle = new DataGridViewCellStyle
                    {
                        Format = "dd/MM/yyyy HH:mm"
                    }
                });

                dgvProducts.Columns.Add(new DataGridViewTextBoxColumn
                {
                    Name = "UpdatedAt",
                    HeaderText = "UpdatedAt",
                    DataPropertyName = "UpdatedAt",
                    Width = 120,
                    DefaultCellStyle = new DataGridViewCellStyle
                    {
                        Format = "dd/MM/yyyy HH:mm"
                    }
                });
            }
        }

        private void ProductManagementForm_Load(object sender, EventArgs e)
        {
            LoadProducts();
            LoadCategories();
            ClearFields();
            
            // Set up event handlers
            txtSearch.TextChanged += TxtSearch_TextChanged;
            txtBarcode.KeyDown += TxtBarcode_KeyDown;
            dgvProducts.CellClick += DgvProducts_CellClick;
        }

        private void LoadProducts()
        {
            dgvProducts.DataSource = productService.GetAllProducts();
        }

        private void LoadCategories()
        {
            try
            {
                // Load categories for the combo box
                var categories = categoryService.GetAllCategories();
                cmbCategory.DataSource = categories;
                cmbCategory.DisplayMember = "Name";
                cmbCategory.ValueMember = "Id";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading categories: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ClearFields()
        {
            txtProductId.Texts = "";
            txtProductName.Texts = "";
            txtPrice.Texts = "0.00";
            txtStock.Texts = "0";
            txtBarcode.Texts = "";
            if (cmbCategory.Items.Count > 0)
                cmbCategory.SelectedIndex = 0;
            
            isNewProduct = true;
            currentProduct = new Product();
            btnDelete.Enabled = false;
        }

        private void btnNew_Click(object sender, EventArgs e)
        {
            ClearFields();
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(txtProductName.Texts))
            {
                MessageBox.Show("Product name is required.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtProductName.Focus();
                return;
            }

            if (cmbCategory.SelectedValue == null)
            {
                MessageBox.Show("Please select a category.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                cmbCategory.Focus();
                return;
            }

            // Parse price and stock
            if (!decimal.TryParse(txtPrice.Texts, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal price))
            {
                MessageBox.Show("Invalid price format.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtPrice.Focus();
                return;
            }

            if (!int.TryParse(txtStock.Texts, out int stock))
            {
                MessageBox.Show("Invalid stock format.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtStock.Focus();
                return;
            }

            try
            {
                currentProduct.Name = txtProductName.Texts;
                currentProduct.CategoryId = (int)cmbCategory.SelectedValue;
                currentProduct.Price = price;
                currentProduct.Stock = stock;
                currentProduct.Barcode = txtBarcode.Texts;

                bool success;
                if (isNewProduct)
                {
                    success = productService.AddProduct(currentProduct);
                    if (success)
                        MessageBox.Show("Product added successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    success = productService.UpdateProduct(currentProduct);
                    if (success)
                        MessageBox.Show("Product updated successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                if (success)
                {
                    LoadProducts();
                    ClearFields();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving product: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (isNewProduct || currentProduct.Id <= 0)
            {
                MessageBox.Show("Please select a product to delete.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            DialogResult result = MessageBox.Show("Are you sure you want to delete this product?", "Confirm Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result == DialogResult.Yes)
            {
                try
                {
                    bool success = productService.DeleteProduct(currentProduct.Id);
                    if (success)
                    {
                        MessageBox.Show("Product deleted successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        LoadProducts();
                        ClearFields();
                    }
                    else
                    {
                        MessageBox.Show("Failed to delete product.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error deleting product: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void DgvProducts_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                try
                {
                    int productId = Convert.ToInt32(dgvProducts.Rows[e.RowIndex].Cells["Id"].Value);
                    currentProduct = productService.GetProductById(productId) ?? new Product();
                    
                    if (currentProduct != null && currentProduct.Id > 0)
                    {
                        isNewProduct = false;
                        txtProductId.Texts = currentProduct.Id.ToString();
                        txtProductName.Texts = currentProduct.Name;
                        txtPrice.Texts = currentProduct.Price.ToString("F2", CultureInfo.InvariantCulture);
                        txtStock.Texts = currentProduct.Stock.ToString();
                        txtBarcode.Texts = currentProduct.Barcode;
                        
                        // Find and select the category
                        for (int i = 0; i < cmbCategory.Items.Count; i++)
                        {
                            var category = (Category)cmbCategory.Items[i];
                            if (category.Id == currentProduct.CategoryId)
                            {
                                cmbCategory.SelectedIndex = i;
                                break;
                            }
                        }
                        
                        btnDelete.Enabled = true;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error selecting product: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void TxtSearch_TextChanged(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(txtSearch.Texts))
            {
                LoadProducts();
            }
            else
            {
                dgvProducts.DataSource = productService.SearchProducts(txtSearch.Texts);
            }
        }

        private void TxtBarcode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.Handled = true;
                e.SuppressKeyPress = true;
                
                if (!string.IsNullOrWhiteSpace(txtBarcode.Texts))
                {
                    var products = productService.SearchProducts(txtBarcode.Texts);
                    if (products.Count > 0)
                    {
                        currentProduct = products[0];
                        isNewProduct = false;
                        txtProductId.Texts = currentProduct.Id.ToString();
                        txtProductName.Texts = currentProduct.Name;
                        txtPrice.Texts = currentProduct.Price.ToString("F2", CultureInfo.InvariantCulture);
                        txtStock.Texts = currentProduct.Stock.ToString();
                        
                        // Find and select the category
                        for (int i = 0; i < cmbCategory.Items.Count; i++)
                        {
                            var category = (Category)cmbCategory.Items[i];
                            if (category.Id == currentProduct.CategoryId)
                            {
                                cmbCategory.SelectedIndex = i;
                                break;
                            }
                        }
                        
                        btnDelete.Enabled = true;
                    }
                    else
                    {
                        // No product found with this barcode, prepare for new product
                        ClearFields();
                        txtBarcode.Texts = txtBarcode.Texts; // Keep the scanned barcode
                        txtProductName.Focus();
                    }
                }
            }
        }
    }
}
